package com.atguigu.crowdfunding.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.RepositoryService;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.repository.ProcessDefinitionQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.atguigu.atcrowdfunding.controller.BaseController;

@RestController
public class ActivitiController extends BaseController {

	@Autowired
	private RepositoryService repositoryService;

	@RequestMapping("/act/loadImgById/{pdid}")
	public byte[] loadImgById(@PathVariable("pdid") String pdid){
		ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery();
		//根据pdid拿到流程定义
		ProcessDefinition pd = query.processDefinitionId(pdid).singleResult();
		//根据流程定义拿到部署id和图片名
		InputStream in = repositoryService.getResourceAsStream(pd.getDeploymentId(),pd.getDiagramResourceName());
		
		//把数据从数据库中读出来，每次100个字节，写到内存里
		ByteArrayOutputStream swapStream = new ByteArrayOutputStream();//获取内存流
		byte[] buff = new byte[100]; //buff用于存放循环读取的临时数据 
		int rc = 0; 
		try {
			while ((rc = in.read(buff, 0, 100)) > 0) { 
				swapStream.write(buff, 0, rc); 
			}
		} catch (IOException e) {
			e.printStackTrace();
		} 
		byte[] in_b = swapStream.toByteArray(); //in_b为转换之后的结果
		 
		return in_b;


	}
	@RequestMapping("/act/deploy")
	public String deploye(@RequestParam("pdfile") MultipartFile file) {
		try {
			repositoryService.createDeployment().addInputStream(file.getOriginalFilename(), file.getInputStream()).deploy();
			return "成功";
		} catch (IOException e) {
			e.printStackTrace();
			return "失败";
		}
	}
	
	
	@RequestMapping("/act/queryProDefCount")
	public Integer queryProDefCount() {
		Long count = repositoryService.createProcessDefinitionQuery().count();
		return count.intValue();
	}

	@RequestMapping("/act/queryProDefList")
	public List<Map<String, Object>> queryProDefList(@RequestBody Map<String, Object> paramMap){
	
		Integer startIndex = (Integer) paramMap.get("startIndex");
		Integer pagesize = (Integer) paramMap.get("pagesize");
		List<ProcessDefinition> listPage = repositoryService.createProcessDefinitionQuery().listPage(startIndex, pagesize);

		List<Map<String, Object>> pdMapList = new ArrayList<Map<String,Object>>();
		
		for ( ProcessDefinition pd : listPage ) {
			Map<String, Object> pdMap = new HashMap<String, Object>();
			pdMap.put("id", pd.getId());
			pdMap.put("key", pd.getKey());
			pdMap.put("name", pd.getName());
			pdMap.put("version", pd.getVersion());
			pdMap.put("deployid", pd.getDeploymentId());
			pdMapList.add(pdMap);
		}


		
		return pdMapList;
	}
	
	/*
	@RequestMapping("/act/queryProDefList/{startIndex}/{pagesize}")
	public List<Map<String, Object>> queryProDefList(@PathVariable("startIndex") Integer startIndex,@PathVariable("pagesize") Integer pagesize) {
	List<ProcessDefinition> listPage = repositoryService.createProcessDefinitionQuery().listPage(startIndex, pagesize);
		

		List<Map<String, Object>> pdMapList = new ArrayList<Map<String,Object>>();
		 
		for ( ProcessDefinition pd : listPage ) {
			Map<String, Object> pdMap = new HashMap<String, Object>();
			pdMap.put("id", pd.getId());
			pdMap.put("key", pd.getKey());
			pdMap.put("name", pd.getName());
			pdMap.put("version", pd.getVersion());
			pdMap.put("deployid", pd.getDeploymentId());
			pdMapList.add(pdMap);
		}


		
		return pdMapList;
	}
	*/

}
