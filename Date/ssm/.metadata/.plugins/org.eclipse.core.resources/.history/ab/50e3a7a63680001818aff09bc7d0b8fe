package com.atguigu.atcrowdfunding.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.atguigu.atcrowdfunding.bean.Permission;
import com.atguigu.atcrowdfunding.bean.User;
import com.atguigu.atcrowdfunding.manager.service.PermissionService;
import com.atguigu.atcrowdfunding.manager.service.UserService;
import com.atguigu.atcrowdfunding.util.Const;

@Controller
public class DispatcherController extends BaseController{

	/**
	 * 首先，根据类型查找，
	 * 如果查找到一个，那么直接注入
	 * 如果查找到多个
	 * 		可以通过数组伙计和（必须指定泛型）来接收多个；
	 * 		或者：根据名称在进行朝朝，如果多个对象中的名字之一于属性名称一致，直接注入；
	 * 		如果多个对象名称没有与之一致的，报错；
	 * 	可以通过@Qualifier("userService")来指定名称进行依赖注入。
	 * 	如果指定的名称不存在，报错；可以required=false不进行注入
	 */
	@Autowired
	private UserService userService;//代表的是对象的引用，调用方法没有去修改数据，不涉及数据安全问题
	
	@Autowired
	private PermissionService permissionService;
	
	@RequestMapping("/index")//请求的时候加扩展名。htm是为了让核心控制器匹配上
	public String index() {
		return "index";
	}
	
	@RequestMapping("/login")
	public String login() {
		return "login";
	}
	
	@RequestMapping("/main.htm")
	public String main() {
		return "main";
	}
	//异步请求处理
	@ResponseBody//注解表示启用HttpMessageConverter进行数据格式转换
	//1、如果方法返回结果是字符串，会采用StringHttpMessageConverter进行转换，实质上就是将字符串以流的形式返回给客户端
	//2、如果方法返回结果是Object(可能是User,Map,List),会采用MappingJackson2HttpMessageConverter进行转换，将Object转换为JSON格式的字符串返回给客户端。
	@RequestMapping("/doLogin")
	public Object doLogin(String loginacct, String userpswd, String usertype,HttpSession session) {
		start();
		try {
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("loginacct", loginacct);
			paramMap.put("userpswd", userpswd);
			paramMap.put("usertype", usertype);
			
			User user = userService.queryUserByLogin(paramMap);
			//返回查询结果
			session.setAttribute(Const.LOGIN_USER, user);
			//---查询当前用户的许可权限
			List<Permission> selfPermission = permissionService.queryPermissionByUserId(user.getId());
			Map<Integer, Permission> allMap = new HashMap<Integer, Permission>();
			for (Permission permission : selfPermission) {
				allMap.put(permission.getId(), permission);
			}
			Permission root = null;
			for (Permission permission : selfPermission) {
				if (permission.getPid() == null) {
					root = permission;
				} else {
					Integer pid = permission.getPid();
					Permission parent = allMap.get(pid);
					parent.getChildren().add(permission);
				}
			}
			session.setAttribute(Const.SELT_PERMISSION_ROOT, root);
			//------------------------------------------------
			success(true);
		} catch (Exception e) {
			success(false);
			message(e.getMessage());
			e.printStackTrace();
		}
		return end();
	}
}
