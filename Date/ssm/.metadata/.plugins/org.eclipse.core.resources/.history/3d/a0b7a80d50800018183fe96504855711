package com.atguigu.atcrowdfunding.controller;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.atguigu.atcrowdfunding.bean.Permission;
import com.atguigu.atcrowdfunding.bean.User;
import com.atguigu.atcrowdfunding.manager.service.PermissionService;
import com.atguigu.atcrowdfunding.manager.service.UserService;
import com.atguigu.atcrowdfunding.util.Const;
import com.atguigu.atcrowdfunding.util.MD5Util;
import com.atguigu.atcrowdfunding.util.StringUtil;

@Controller
public class DispatcherController extends BaseController{

	/**
	 * 首先，根据类型查找，
	 * 如果查找到一个，那么直接注入
	 * 如果查找到多个
	 * 		可以通过数组伙计和（必须指定泛型）来接收多个；
	 * 		或者：根据名称在进行朝朝，如果多个对象中的名字之一于属性名称一致，直接注入；
	 * 		如果多个对象名称没有与之一致的，报错；
	 * 	可以通过@Qualifier("userService")来指定名称进行依赖注入。
	 * 	如果指定的名称不存在，报错；可以required=false不进行注入
	 */
	@Autowired
	private UserService userService;//代表的是对象的引用，调用方法没有去修改数据，不涉及数据安全问题
	
	@Autowired
	private PermissionService permissionService;
	
	@RequestMapping("/index")//请求的时候加扩展名。htm是为了让核心控制器匹配上
	public String index() {
		return "index";
	}
	
	@RequestMapping("/login")
	public String login() {
		return "login";
	}
	
	@RequestMapping("/main.htm")
	public String main() {
		return "main";
	}
	@ResponseBody 
	@RequestMapping("/doLogin")
	public Object doLogin(String loginacct,String userpswd,String usertype,HttpSession session) {	
		
		start();
		
		try {
			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("loginacct", loginacct);
			paramMap.put("userpswd", userpswd);
			paramMap.put("usertype", usertype);		
			
			User user = userService.queryUserByLogin(paramMap);
			
			session.setAttribute(Const.LOGIN_USER, user);
			
			
			//---查询当前用户所拥有的许可权限---------------------------------------------
			List<Permission>  selfPermission = permissionService.queryPermissionByUserid(user.getId());
			
			Map<Integer,Permission> allMap = new HashMap<Integer,Permission>();
			for (Permission permission : selfPermission) {
				allMap.put(permission.getId(), permission);
			}
			
			Permission root = null ;
			for (Permission permission : selfPermission) {
				if(permission.getPid()==null) { //查找根节点
					root = permission;
				}else {
					Integer pid = permission.getPid();
					
					Permission parent = allMap.get(pid); //根据子节点的父id查询父节点。
					
					parent.getChildren().add(permission); //组合父与子节点之间关系
				}
			}
			
			session.setAttribute(Const.SELT_PERMISSION_ROOT, root);
			
			//------------------------------------------------
			success(true);
		} catch (Exception e) {
			success(false);
			message(e.getMessage());
			e.printStackTrace();
		}
		
		return end() ; // {"success":true}     {"success":true,"message":"用户名称不存在"}
	}
	/*
	@ResponseBody
	@RequestMapping("/dologin")
	public Object dologin(HttpSession session, String loginacct, String userpswd, String usertype) {
		// JAVA(Object) ==> NET(json string) ==> IE(JSON Object)
		start();	 
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("loginacct", loginacct);
		paramMap.put("userpswd", MD5Util.digest(userpswd));
		// 返回查询结果
		User user = userService.queryUser(paramMap);	 
		if ( user == null ) {
			message ("用户账号或密码不正确");
			success(false);
		} else {
			// 保存登陆用户信息
			session.setAttribute(Const.LOGIN_USER, user);
			success(true);		 
			List<Permission> loginPermissions = userService.queryPermissionByUserId(user.getId());	 
			Permission rootPermission = null;
			Map<Integer,Permission> map = new HashMap<Integer,Permission>();		 
			Set<String> authUris = new HashSet<String>();		 
			for (Permission permission : loginPermissions) {
				map.put(permission.getId(), permission);
				if(StringUtil.isNotEmpty(permission.getUrl())){
					authUris.add("/"+permission.getUrl());
				}
			}	 
			for (Permission permission : loginPermissions) {
				if(permission.getPid()==0){
					rootPermission = permission ;
				}else{
					Permission parent = map.get(permission.getPid());        
					parent.setOpen(true);
					parent.getChildren().add(permission);
				}
			}
		 
			session.setAttribute(Const.LOGIN_ROOT_PERMISSION, rootPermission);
			session.setAttribute(Const.LOGIN_AUTH_PERMISSION_URI, authUris);
		}
		return end();
	}
	*/

}
